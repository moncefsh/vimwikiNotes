searching for file
:edit
	edit command open existing files or  new one in case the filename suplyed as an argument doesnt exist
	but it can also be used to search for files in vim.
	:edit accepts wildcards arguments. * matches any file in the current directory. 
	If you are only looking for files with .cpp extension in the current directory
	:edit *.cpp<Tab>
	Vim will give you a list of all .cpp files in the current directory to choose from.
	You can use ** to search recursively , :edit **/.cpp<Tab>

:find	
	find work the same as edit exept that it search using path varaible
	path:
		. means to search relative to the directory of the current file.
		, means to search in the current directory.
	to add a directory to  path
		:set path+=directory
	this way find will search for a file in the directory you just added
	in case of a nested directory you should add /**
		:set path+=directory/**
	and it will search in all the subdirectories .
	NT: in case of a large directory the search will slow down 

searching in file:
:grep
	Internal grep :vimgrep or just :vim
		:vim /pattern/ file
		/pattern/ is a regex pattern of your search term.
		file is the file arguments. You can pass multiple arguments. 
		Vim will search for the pattern inside the file arguments. 
		Similar to :find, you can pass it * and ** wildcards.
		After running that, you will be redirected to the first result.
		Vim's vim search command uses quickfix operation. 
		To see all search results, run :copen. This opens a quickfix window.
		:copen        Open the quickfix window
		:cclose       Close the quickfix window
		:cnext        Go to the next error
		:cprevious    Go to the previous error
		:colder       Go to the older error list
		:cnewer       Go to the newer error list
	external grep :grep
		this command ses grep terminal command
		:grep -R "pattern" file
		 It also displays all matches using quickfix.
		 Vim uses grepprg variable to determine which external program to run when running :grep 
		 so you don't have to always use the terminal grep command
	NT: grep is replaced here by grepprg so we dont need to add the -R option just grep "pattern"
	
search and replace in multiple  files:
    first method:
	:grep "oldWord"
	:cfdo %s/oldWord/newWord/g | update
	
	:grep oldWord uses ripgrep to search for all instances of "oldWord" .
	:cfdo executes any command you pass to all files in your quickfix list.
	In this case, your command is the substitution command %s/oldWord/donut/g.
	The pipe (|) is a chain operator. The updat command saves each file after substitution.
    second method:
   	1-Clear your buffers,run :%bd | e# command (%bd deletes all the buffers and e# opens the file you were just on).
	2-Run :Files.
	3-Select all files you want to perform search-and-replace on. To select multiple files, use <Tab> / <Shift-Tab>. 
	This is only possible if you have the multiple flag (-m) in FZF_DEFAULT_OPTS.
	4-Run :bufdo %s/oldWord/newWord/g | update
